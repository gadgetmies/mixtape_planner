{"version":3,"sources":["lib/graphWalk.js","lib/promiseHelpers.js","test/tracklist.js","Tracklist.js","lib/parseTracklist.js","lib/pathToTSV.js","App.js","test/playlist.js","reportWebVitals.js","index.js","lib/keys.js","lib/penalties.js","lib/arrayHelppers.js"],"names":["graphWalk","a","tracks","intro","outro","targetLength","penalties","tolerance","seed","timeout","minAndMaxValuesForPenalties","Object","fromEntries","keys","map","key","values","R","limits","penaltyLookup","_","ps","min","max","weight","normalize","i","fn","calculatePenalty","level","track","mapped","name","penaltyObj","penaltyFn","properties","routes","bestRoute","path","penalty","Infinity","iterate","node","tracksLeft","Promise","accept","setImmediate","currentLength","currentPenalty","atTargetLength","suitableTracks","undefined","findSuitableTracks","filter","t","currentNode","push","previous","splice","console","log","keyDistance","length","index","Math","round","graphStart","Date","now","promiseOrTimeout","sort","seedrandom","graphTime","timeoutId","race","setTimeout","result","clearTimeout","useStyles","makeStyles","root","width","container","maxHeight","Tracklist","editing","selectedTrackIndex","onTrackSelected","classes","Paper","className","TableContainer","Table","stickyHeader","size","TableHead","TableRow","TableCell","propertyName","replace","toUpperCase","TableBody","Radio","checked","onChange","artist","title","getKeyString","keyNumber","isMinor","property","list","rows","trim","split","l","headers","validRows","r","assert","toLowerCase","propertyNames","slice","propertyValues","parseInt","value","match","e","error","pathToTSV","header","join","App","useState","tracklist","setTracklist","parsePlaylist","setTracks","paths","setPaths","defaultTracklist","selectedPath","setSelectedPath","setTargetLength","setTolerance","processing","setProcessing","editingPlaylist","setEditingPlaylist","editingIntro","setEditingIntro","editingOutro","setEditingOutro","setIntro","setOutro","parametersChanged","setParametersChanged","setSeed","showAdvancedOptions","setShowAdvancedOptions","targetValues","setTargetValues","processingMessage","setProcessingMessage","editingSelectedTracklistResult","setEditingSelectedTracklistResult","selectedTracklist","setSelectedTracklist","targetFunctions","raisingSaw","saw","absoluteSine","targetFn","setTargetFunction","firstProperty","entries","firstPropertyValue","parameterRange","getTargetValues","cachedTargetValues","setCachedTargetValues","Container","maxWidth","href","Button","disabled","onClick","parsedPlaylist","find","color","variant","Accordion","AccordionSummary","expandIcon","aria-label","aria-controls","id","AccordionDetails","Typography","findIndex","style","display","TextField","fullWidth","rowsMax","multiline","target","onKeyDown","preventDefault","textArea","start","selectionStart","end","selectionEnd","substring","Slider","valueLabelDisplay","marginTop","Select","tf","MenuItem","marginBottom","label","toString","options","chart","xaxis","categories","series","data","height","FormControlLabel","control","Switch","step","Number","Input","random","document","getElementById","scrollIntoView","behavior","block","CircularProgress","minHeight","ButtonGroup","newLength","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","isSuitableKey","t1","t2","useConservativeKeyTransitions","abs","current","ref","riseTime","n","pos","floor","sin","newMin","newMax","range","oldMin","oldMax","oldValue"],"mappings":"0TAQaA,EAAS,uCAAG,6DAAAC,EAAA,6DAASC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,MAAOC,EAA/B,EAA+BA,aAAcC,EAA7C,EAA6CA,UAAWC,EAAxD,EAAwDA,UAAWC,EAAnE,EAAmEA,KAAnE,IAAyEC,eAAzE,MAAmF,GAAnF,EACjBC,EAA8BC,OAAOC,YACzCD,OAAOE,KAAKP,GAAWQ,KAAI,SAACC,GAC1B,IAAMC,EAASC,IAAMA,IAAO,CAAC,aAAcF,IAAOb,GAClD,MAAO,CAACa,EAAKG,YAAOF,QAIlBG,EAAgBF,KAAgB,SAACG,EAAGL,EAAKM,GAAQ,IAAD,EAC/BX,EAA4BK,GAAzCO,EAD4C,EAC5CA,IAAKC,EADuC,EACvCA,IAEb,MAAO,CACLC,OAAQH,EAAGN,GAAKS,OAChBR,OAAQS,YAAUH,EAAKC,EAAfE,CAAoBR,IAAQ,EAAGZ,GAAcS,KAAI,SAACY,GAAD,OAAOL,EAAGN,GAAKY,GAAGD,UAE5EpB,GAEGsB,EAAmB,SAACC,EAAOC,GAC/B,IAAMC,EAASpB,OAAOE,KAAKM,GAAeL,KAAI,SAACkB,GAC7C,IAAMC,EAAad,EAAca,GACjC,OAAOC,EAAWT,OAASU,YAAUD,EAAWjB,OAAOa,GAAQC,EAAMK,WAAWH,OAElF,OAAOf,IAAMc,IAGXK,EAAS,GACTC,EAAY,CACdC,KAAM,GACNC,QAASC,KAGLC,EAAU,SAAVA,EAAWC,EAAMtC,EAAOuC,GAC5B,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,EAAY,sBAAC,8CAAA7C,EAAA,sDAUX,GATMsC,EAAUX,EAAiBc,EAAKK,cAAeL,EAAKZ,OACpDkB,EAAiBN,EAAKM,eAAiBT,EACvCU,EAAiBP,EAAKK,gBAAkB1C,EAAe,EACvD6C,EAAiBD,OACnBE,EACAC,YAAmBV,EAAKZ,MAAOa,GAAYU,QACzC,SAACC,GAAD,OAAO1B,EAAiBc,EAAKK,cAAgB,EAAGO,GAAK/C,KAGvD0C,GACED,EAAiBX,EAAUE,QAAS,CAGtC,IAFID,EAAO,GACPiB,EAAcb,EACK,OAAhBa,GACLjB,EAAKkB,KAAKD,EAAYzB,OACtByB,EAAcA,EAAYE,SAG5BpB,EAAY,CACVE,QAASS,EACTV,KAAK,GAAD,mBAAMrB,IAAUqB,IAAhB,CAAuBlC,KAG7BgC,EAAOsB,OAAO,EAAG,EAAGrB,GAEpBsB,QAAQC,IAAR,mCAAwCZ,IA1BjC,KA8Baa,aAAY,EAAZA,CAAmBnB,EAAKZ,MAAO1B,GAASC,EAAeqC,EAAKK,cAAgB,GAIlGE,GAC0B,IAA1BC,EAAeY,QACfpB,EAAKM,eAAiBX,EAAUE,SApCvB,yCAsCFM,KAtCE,OAyCPkB,EAAQ,EAzCD,cA0CKb,GA1CL,kEA0CAI,EA1CA,QA2CkB,IAAvBZ,EAAKK,gBACPY,QAAQC,IAAR,UAAeI,KAAKC,MAAMF,EAAQb,EAAeY,QAAjD,MACAC,KA7CO,UAgDHtB,EACJ,CACEgB,SAAUf,EACVZ,MAAOwB,EACPP,cAAeL,EAAKK,cAAgB,EACpCC,eAAgBN,EAAKM,eAAiBT,GAExCnC,EACAa,IAAU,CAACqC,GAAIX,IAxDR,0KA4DJE,KA5DI,sEAiEXqB,EAAaC,KAAKC,MAlGD,UAoGjBC,aACJ,kBACE5B,EACE,CACEgB,SAAU,KACV3B,MAAO3B,EACP4C,cAAe,EACfC,eAAgB,GAElB5C,EACAa,IAAU,CAACd,EAAOC,GAAQF,GAAQoE,MAAK,kBAAMC,EAAW/D,GAAQ,SAE1D,GAAVC,EAAe,KAhHM,eAmHjB+D,EAAYL,KAAKC,MAAQF,EAE/BP,QAAQC,IAAI,cACZD,QAAQC,IAAR,kBAAuB1D,EAAO4D,OAA9B,yBAAqDU,IAtH9B,kBAwHhBpC,GAxHgB,4CAAH,wD,gICRTiC,EAAmB,SAAC1C,EAAIlB,GACnC,IAAIgE,EACJ,OAAO7B,QAAQ8B,KAAK,CAClB,IAAI9B,SAAQ,SAAAC,GAAM,OAAI4B,EAAYE,YAAW,WAE3C,OADAhB,QAAQC,IAAI,YACLf,MACNpC,MACH,IAAImC,QAAJ,uCAAY,WAAMC,GAAN,eAAA5C,EAAA,sEACW0B,IADX,cACJiD,EADI,OAEVjB,QAAQC,IAAI,QACZiB,aAAaJ,GAHH,kBAKH5B,EAAO+B,IALJ,2CAAZ,2D,qVCPU,kT,kGCYRE,EAAYC,IAAW,CAC3BC,KAAM,CACJC,MAAO,QAETC,UAAW,CACTC,UAAW,OAIA,SAASC,EAAT,GAA8E,IAAzDlF,EAAwD,EAAxDA,OAAQmF,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,mBAAoBC,EAAmB,EAAnBA,gBACjEC,EAAUV,IAEhB,OACE,cAACW,EAAA,EAAD,CAAOC,UAAWF,EAAQR,KAA1B,SACE,cAACW,EAAA,EAAD,CAAgBD,UAAWF,EAAQN,UAAnC,SACE,eAACU,EAAA,EAAD,CAAOC,cAAY,EAACC,KAAK,QAAzB,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACGX,EAAU,cAACY,EAAA,EAAD,qBAAgC,KAC3C,cAACA,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,kBACC/F,EAAO,GACJS,OAAOE,KAAKX,EAAO,GAAGiC,YAAYrB,KAAI,SAACoF,EAAcxE,GAAf,OACpC,cAACuE,EAAA,EAAD,UAAoBC,EAAaC,QAAQ,KAAMD,EAAa,GAAGE,gBAA/C1E,MAElB,UAGR,cAAC2E,EAAA,EAAD,UACGnG,EAAOY,KAAI,SAACgB,EAAOJ,GAAR,OACV,eAACsE,EAAA,EAAD,WACGX,EACC,cAACY,EAAA,EAAD,UACE,cAACK,EAAA,EAAD,CAAOC,QAASjB,IAAuB5D,EAAG8E,SAAU,kBAAMjB,EAAgB7D,OAD7D,UAGb,KACJ,cAACuE,EAAA,EAAD,UAAYnE,EAAM2E,SAClB,cAACR,EAAA,EAAD,UAAYnE,EAAM4E,QAClB,cAACT,EAAA,EAAD,UAAYU,YAAa7E,EAAM8E,UAAW9E,EAAM+E,WAC/ClG,OAAOK,OAAOc,EAAMK,YAAYrB,KAAI,SAACgG,GAAD,OACnC,cAACb,EAAA,EAAD,UAA2Ba,GAAZ,iBAVJpF,e,+BCzCd,WAACqF,GACd,IAAMC,EAAOD,EACVE,OACAC,MAAM,MACNpG,KAAI,SAACqG,GAAD,OAAOA,EAAEF,OAAOC,MAAM,SAE7B,GAAoB,IAAhBF,EAAKlD,OAAc,MAAO,GAC9B,IAAMsD,EAAUJ,EAAK,GACfK,EAAYL,EAAK3D,QAAO,SAACiE,GAAD,OAAOA,EAAExD,SAAWsD,EAAQtD,UAC1DyD,IAAoC,WAA7BH,EAAQ,GAAGI,eAClBD,IAAoC,UAA7BH,EAAQ,GAAGI,eAClBD,IAAoC,QAA7BH,EAAQ,GAAGI,eAA0C,aAAfJ,EAAQ,IAErD,IAAMK,EAAgBL,EAAQM,MAAM,GAEpC,OAAOL,EAAUK,MAAM,GAAG5G,KAAI,YAA8C,IAAD,iBAA3C2F,EAA2C,KAAnCC,EAAmC,KAA5B3F,EAA4B,KAApB4G,EAAoB,WACzE,IACE,MAAO,CACLjB,QACAD,SACAG,UAAWgB,SAAS7G,EAAI2G,MAAM,GAAI,IAClCb,QAAiC,MAAxB9F,EAAIA,EAAI+C,OAAS,IAAsC,MAAxB/C,EAAIA,EAAI+C,OAAS,GACzD3B,WAAYxB,OAAOC,YAAY+G,EAAe7G,KAAI,SAAC+G,EAAOnG,GAAR,MAAc,CAAC+F,EAAc/F,GAAImG,EAAMC,MAAM,UAAU,SAE3G,MAAOC,GACPpE,QAAQqE,MAAR,gCAAuCtB,EAAvC,YAAgDD,EAAhD,YAA0D1F,EAA1D,YAAiE4G,S,yBCbxDM,EAZG,SAAC3F,GACjB,IAAM4F,EAAM,8BAA0BvH,OAAOE,KAAKyB,EAAK,GAAGH,YAAYgG,KAAK,OACrEjI,EAASoC,EACZxB,KACC,gBAAG4F,EAAH,EAAGA,MAAOD,EAAV,EAAUA,OAAQG,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,QAAS1E,EAAtC,EAAsCA,WAAtC,gBACKsE,EADL,aACgBC,EADhB,aAC0BC,YAAaC,EAAWC,GADlD,aAC+DlG,OAAOK,OAAOmB,GAAYgG,KAAK,UAE/FA,KAAK,MAER,MAAM,GAAN,OAAUD,EAAV,aAAqBhI,I,wKCgkBRkI,OA1iBf,WAAgB,IAAD,EACqBC,mBClCtB,29PDiCC,mBACNC,EADM,KACKC,EADL,OAEeF,mBAASG,EAAcF,IAFtC,mBAENpI,EAFM,KAEEuI,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAI2BN,mBAAS,CAAE9F,aAASY,EAAWb,KAAMkG,EAAcI,KAJ9E,mBAINC,EAJM,KAIQC,EAJR,OAK2BT,mBAAS,GALpC,mBAKNhI,EALM,KAKQ0I,EALR,OAMiBV,mBAAS,GAN1B,mBAMN5H,EANM,KAMGkE,GANH,QAOqB0D,mBAAS,KAP9B,qBAON9H,GAPM,MAOKyI,GAPL,SAQuBX,oBAAS,GARhC,qBAQNY,GARM,MAQMC,GARN,SASiCb,oBAAS,GAT1C,qBASNc,GATM,MASWC,GATX,SAU2Bf,oBAAS,GAVpC,qBAUNgB,GAVM,MAUQC,GAVR,SAW2BjB,oBAAS,GAXpC,qBAWNkB,GAXM,MAWQC,GAXR,SAYanB,mBAASnI,EAAO,IAZ7B,qBAYNC,GAZM,MAYCsJ,GAZD,SAaapB,mBAASpH,IAAOf,IAb7B,qBAaNE,GAbM,MAaCsJ,GAbD,SAcqCrB,oBAAS,GAd9C,qBAcNsB,GAdM,MAcaC,GAdb,SAeWvB,mBAAS,GAfpB,qBAeN7H,GAfM,MAeAqJ,GAfA,SAgByCxB,oBAAS,GAhBlD,qBAgBNyB,GAhBM,MAgBeC,GAhBf,SAiB2B1B,mBACtC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,IAAIvH,KAAI,SAAC+G,GAAD,MAAY,CAAEA,aAlBzE,qBAiBNmC,GAjBM,MAiBQC,GAjBR,SAoBqC5B,mBAAS,IApB9C,qBAoBN6B,GApBM,MAoBaC,GApBb,SAqB+D9B,oBAAS,GArBxE,qBAqBN+B,GArBM,MAqB0BC,GArB1B,SAsBqChC,mBAASO,GAtB9C,qBAsBN0B,GAtBM,MAsBaC,GAtBb,MAwBPC,GAAkB,CACtB,CACExI,KAAM,cACNL,GAAI8I,YAAW,EAAGpK,IAEpB,CACE2B,KAAM,MACNL,GAAI+I,YAAI,IAEV,CACE1I,KAAM,gBACNL,GAAIgJ,KAEN,CACE3I,KAAM,SACNL,GAAI,SAACD,GAAD,OAAOsI,GAAatI,GAAGmG,SAvClB,GA0CyBQ,mBAASmC,GAAgB,IA1ClD,qBA0CNI,GA1CM,MA0CIC,GA1CJ,MA4CPC,GAAgB,SAAChJ,GAAD,OAAWb,IAAO,CAAC,GAAIN,OAAOoK,QAAQjJ,EAAMK,cAE5D6I,GAAqB,SAAClJ,GAAD,OAAWb,IAAO,CAAC,GAAI6J,GAAchJ,KAC1DmJ,GAAiB/J,YAAOD,IAAM+J,GAAoB9K,IAClDgL,GAAkB,SAAC,EAAc7K,EAAcsB,GAAQ,IAAlCL,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,IAC9B,OAAOE,YAAUH,EAAKC,EAAfE,CAAoBR,IAAQ,EAAGZ,GAAcS,KAAI,SAACY,GAAD,OAAOC,EAAGD,QAjDvD,GAmDuC2G,mBAClD6C,GAAgBD,GAAgB5K,EAAcuK,GAASjJ,KApD5C,qBAmDNwJ,GAnDM,MAmDcC,GAnDd,MAuDb,OACE,qCACE,eAACC,GAAA,EAAD,CAAWC,SAAS,KAApB,UACE,iDACA,2TAKA,yPAIA,sLAEgD,mBAAGC,KAAK,UAAR,4BAFhD,8CAKA,4CACA,0CACW,IACT,cAACC,EAAA,EAAD,CACE1F,KAAK,QACL2F,SAAUxC,GACVyC,QAAS,WACP,GAAIvC,GAAiB,CACnBC,IAAmB,GACnB,IAAMuC,EAAiBnD,EAAcF,GACrCG,EAAUkD,GACV/B,IAAqB,GACrBH,GAASkC,EAAeC,KAAK3K,IAASd,MACtCuJ,GAASiC,EAAeC,KAAK3K,IAASb,WAEtCgJ,IAAmB,IAGvByC,MAAM,UACNC,QAAQ,YAhBV,SAkBG3C,GAAkB,QAAU,qBAGhCA,GACC,qCACE,eAAC4C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,WAAY,cAAC,KAAD,CAAUJ,MAAO,YAC7BK,aAAW,SACXC,gBAAc,8BACdC,GAAG,6BAJL,0BAQA,cAACC,EAAA,EAAD,UACE,eAACC,GAAA,EAAD,iMAGE,uBACA,uBAJF,2RAOkF,IAChF,mBAAGf,KAAK,yBAAR,0BARF,sMAU2C,mBAAGA,KAAK,sBAAR,qBAV3C,iCAYE,uBACA,uBAbF,yQAoBJ,0BAGF,qCACE,6CACc,IACZ,cAACC,EAAA,EAAD,CACEC,SAAUxC,GACVnD,KAAK,QACL+F,MAAM,UACNC,QAAQ,YACRJ,QAAS,kBAAMpC,IAAiBD,KALlC,SAOGA,GAAe,OAAS,YAG7B,cAACjE,EAAD,CACElF,OAAQmJ,GAAenJ,EAAS,CAACC,IAAOkD,OAAOpC,KAE/CoE,QAASgE,GACToC,SAAUxC,GACV1D,gBAAiB,SAAC7D,GAChB+H,GAASvJ,EAAOwB,IAChBkI,IAAqB,IAEvBtE,mBAAoBpF,EAAOqM,UAAUtL,IAASd,MAP1C,SASN,4CACa,IACX,cAACqL,EAAA,EAAD,CACEC,SAAUxC,GACVnD,KAAK,QACL+F,MAAM,UACNC,QAAQ,YACRJ,QAAS,kBAAMlC,IAAiBD,KALlC,SAOGA,GAAe,OAAS,YAG7B,cAACnE,EAAD,CACElF,OAAQqJ,GAAerJ,EAAS,CAACE,IAAOiD,OAAOpC,KAE/CoE,QAASkE,GACTkC,SAAUxC,GACV1D,gBAAiB,SAAC7D,GAChBgI,GAASxJ,EAAOwB,IAChBkI,IAAqB,IAEvBtE,mBAAoBpF,EAAOqM,UAAUtL,IAASb,MAP1C,SASN,sCACA,cAACgF,EAAD,CAAWlF,OAAQe,IAAU,CAACd,GAAOC,IAAQF,IAAa,aAG9D,qBAAKsM,MAAO,CAAEC,QAAStD,GAAkB,QAAU,QAAnD,SACE,cAACuD,EAAA,EAAD,CACEC,WAAW,EACXC,QAAS,GACTC,WAAS,EACTf,QAAQ,WACRtF,SAAU,SAACuB,GACTQ,EAAaR,EAAE+E,OAAOjF,QAExBkF,UAAW,SAAChF,GACV,GAAc,QAAVA,EAAEhH,IAAe,CACnBgH,EAAEiF,iBACF,IAAMC,EAAWlF,EAAE+E,OACbI,EAAQD,EAASE,eACjBC,EAAMH,EAASI,aAErBJ,EAASpF,MAAQoF,EAASpF,MAAMyF,UAAU,EAAGJ,GAAS,KAAOD,EAASpF,MAAMyF,UAAUF,GAGtFH,EAASE,eAAiBF,EAASI,aAAeH,EAAQ,EAE1D3E,EAAa0E,EAASpF,SAG1BA,MAAOS,MAGX,yEACA,cAACiF,GAAA,EAAD,CACEjM,IAAK,EACLC,IAAK,GACLiM,kBAAkB,KAClB3F,MAAOxH,EAAe,EACtBoL,SAAUxC,GACVuD,MAAO,CAAEiB,UAAW,IACpBjH,SAAU,SAACpF,EAAGyG,GACZkB,EAAgBlB,EAAQ,GACxB+B,IAAqB,GACrBwB,GAAsBF,GAAgBD,GAAgB5K,EAAcuK,GAASjJ,QAGjF,8CACA,cAAC+L,GAAA,EAAD,CACE7F,MAAO+C,GAAS5I,KAChByJ,SAAUxC,GACVzC,SAAU,SAACuB,GACT,IAAM4F,EAAKnD,GAAgBoB,KAAK3K,IAAS,OAAQ8G,EAAE+E,OAAOjF,QAC1DgD,GAAkB8C,GAClB/D,IAAqB,GACrBwB,GAAsBF,GAAgBD,GAAgB5K,EAAcsN,EAAGhM,MAP3E,SAUG6I,GAAgB1J,KAAI,gBAAGkB,EAAH,EAAGA,KAAH,OACnB,cAAC4L,GAAA,EAAD,CAAU/F,MAAO7F,EAAjB,SACGA,GADyBA,QAKb,WAAlB4I,GAAS5I,KACR,qCACE,wCACCf,IAAQ,EAAGZ,GAAcS,KAAI,SAACY,GAAD,OAC5B,qCACS,IAANA,GAAWA,EAAI,KAAO,EAAI,uBAAS,KACpC,cAACgL,EAAA,EAAD,CACE5G,KAAK,QACLgG,QAAQ,WACRU,MAAO,CAAEvH,MAAO,GAAI4I,aAAc,IAClCC,OAAQpM,EAAI,GAAGqM,WAEflG,MAAOmC,GAAatI,GAAGmG,MACvBrB,SAAU,SAACuB,GACTiC,GAAatI,GAAGmG,MAAQ5G,IAAQ,EAAG,GAAI2G,SAASG,EAAE+E,OAAOjF,QAAU,GACnEoC,GAAgB,YAAID,KACpBJ,IAAqB,KALlBlI,YAWX,KACJ,cAAC,IAAD,CACEsM,QAAS,CACPC,MAAO,CACL7B,GAAI,qBAEN8B,MAAO,CACLC,WAAYlN,IAAQ,EAAGZ,EAAe,KAG1C+N,OAAQ,CACN,CACEpM,KAAM,gBACNqM,KAAMnD,GAAgBD,GAAgB5K,EAAcuK,GAASjJ,MAGjE2M,OAAO,QAET,cAACC,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACElI,QAASuD,GACTtD,SAAU,WACRuD,IAAwBD,OAI9BgE,MAAM,0BAEPhE,GACC,qCACE,8DACA,cAACyD,GAAA,EAAD,CACEjM,IAAK,GACLC,IAAK,EACLmN,KAAM,GACNlB,kBAAkB,KAClB3F,MAAOpH,EACPgL,SAAUxC,GACVzC,SAAU,SAACpF,EAAGyG,GACZlD,GAAWkD,GACX+B,IAAqB,MAGzB,2CACA,cAAC2D,GAAA,EAAD,CACEjM,IAAK,EACLC,IAAK,EACLmN,KAAM,GACNlB,kBAAkB,KAClB3F,MAAOtH,GACPkL,SAAUxC,GACVzC,SAAU,SAACpF,EAAGyG,GACZmB,GAAa2F,OAAO9G,IACpB+B,IAAqB,MAGzB,sCACA,cAACgF,GAAA,EAAD,CACE9I,KAAK,QACL+B,MAAOrH,GACPiL,SAAUxC,GACVzC,SAAU,SAACuB,GAAD,OAAO8B,GAAQjC,SAASG,EAAE+E,OAAOjF,QAAU,MAEvD,cAAC2D,EAAA,EAAD,CACE1F,KAAK,QACLgG,QAAQ,YACRD,MAAM,UACNJ,SAAUxC,GACVyC,QAAS,WACP7B,GAAQ7F,KAAKC,MAAsB,IAAhBD,KAAK6K,WACxBjF,IAAqB,IAPzB,8BAaA,KACJ,4BACE,cAAC4B,EAAA,EAAD,CACEK,MAAM,UACNC,QAAQ,YACRL,UAAWtL,KAAUC,KAAWuJ,IAAsC,IAAjBjB,EAAM5E,QAAiBmF,IAAcE,GAC1FuC,QAAO,sBAAE,4BAAAzL,EAAA,6DACPiJ,IAAc,GACdP,EAAS,IACTwB,GAAqB,IAErB2E,SAASC,eAAe,UAAUC,eAAe,CAAEC,SAAU,SAAUC,MAAO,QALvE,SAOalP,YAAU,CAC5BE,SACAC,SACAC,SACAC,eACAE,aACAE,UACAD,QACAF,UAAU,gBA5TGwB,EA4TmB5B,EAAO,GA5ThBe,IAAO,CAAC,GAAI6J,GAAchJ,KA4TJ,CAAEN,OAAQ,EAAGG,GAAIiJ,GAASjJ,OAflE,OAOD+G,EAPC,OAkBP0C,GAAsBF,GAAgBD,GAAgB5K,EAAcuK,GAASjJ,KAC7EiI,IAAqB,GACrBjB,EAASD,GACTI,EAAgBJ,EAAM,IACtBQ,IAAc,GACdmB,IAAkC,GAElCF,GACmB,IAAjBzB,EAAM5E,OAAe,2EAA6E,IA1B7F,kCA7SO,IAAChC,IA6SR,OAJX,8BAqCDoI,GAAoB,4BAAIA,KAAyB,KACjDjB,GACC,qCACE,+CACA,cAACkG,GAAA,EAAD,OAEA,KACJ,sBAAK3C,MAAO,CAAE4C,UAAW,KAAzB,UACE,oBAAIhD,GAAG,SAAP,oBACEnD,GA8JE,KA7JF,qCACE,cAACoG,EAAA,EAAD,CAAaxD,MAAM,UAAUC,QAAQ,YAArC,SACGpD,EAAM5H,KAAI,SAACwB,EAAMZ,GAAP,OACT,cAAC8J,EAAA,EAAD,CAEEK,MAAOvJ,IAASuG,EAAe,YAAc,UAC7C6C,QAAS,WACP5C,EAAgBxG,GAChBiI,GAAqBtC,EAAU3F,EAAKA,QALxC,SAQGZ,EAAI,GAPAA,QAWX,2CACY,IACV,cAAC8J,EAAA,EAAD,CACEC,SAAUxC,GACVnD,KAAK,QACL+F,MAAM,UACNC,QAAQ,YACRJ,QAAS,WACFtB,IAC8B,IAA7BvB,EAAavG,KAAKwB,QACpByG,GAAqBtC,EAAUY,EAAavG,OAGhD+H,IAAmCD,KAXvC,SAcGA,GAAiC,OAAS,YAG7CA,GAGA,qCACE,eAAC2B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,WAAY,cAAC,KAAD,CAAUJ,MAAO,YAC7BK,aAAW,SACXC,gBAAc,8BACdC,GAAG,6BAJL,0BAQA,cAACC,EAAA,EAAD,UACE,eAACC,GAAA,EAAD,iMAGE,uBACA,uBAJF,2RAO6F,IAC3F,mBAAGf,KAAK,yBAAR,0BARF,qMAU2D,IACzD,mBAAGA,KAAK,sBAAR,qBAXF,iCAYE,uBACA,uBAbF,gOAoBJ,uBACA,cAACmB,EAAA,EAAD,CACEC,WAAW,EACXC,QAAS,GACTC,WAAS,EACTJ,QAASrC,GAAiC,QAAU,OACpD0B,QAAQ,WACRtF,SAAU,SAACuB,GACT,IAAMkF,EAAWlF,EAAE+E,OACnBvC,GAAqB0C,EAASpF,OAC9BgB,EAAavG,KAAOkG,EAAcyE,EAASpF,OAC3CgB,EAAatG,aAAUY,EACvB2F,EAAgBD,GAChB,IAAMyG,EAAYzG,EAAavG,KAAKwB,OAChCwL,EAAYjP,IACd0I,EAAgBuG,GAChBlE,GAAsBF,GAAgBD,GAAgBqE,EAAW1E,GAASjJ,OAG9EoL,UAAW,SAAChF,GACV,GAAc,QAAVA,EAAEhH,IAAe,CACnBgH,EAAEiF,iBACF,IAAMC,EAAWlF,EAAE+E,OACbI,EAAQD,EAASE,eACjBC,EAAMH,EAASI,aAErBJ,EAASpF,MAAQoF,EAASpF,MAAMyF,UAAU,EAAGJ,GAAS,KAAOD,EAASpF,MAAMyF,UAAUF,GACtFH,EAASE,eAAiBF,EAASI,aAAeH,EAAQ,EAC1D3C,GAAqB0C,EAASpF,OAE9BgB,EAAavG,KAAOkG,EAAcyE,EAASpF,OAC3CgB,EAAatG,aAAUY,EACvB2F,EAAgBD,GAChB,IAAMyG,EAAYzG,EAAavG,KAAKwB,OAChCwL,EAAYjP,IACd0I,EAAgBuG,GAChBlE,GAAsBF,GAAgBD,GAAgBqE,EAAW1E,GAASjJ,QAIhFkG,MAAOyC,QAzEX,cAAClF,EAAD,CAAWlF,OAAQ2I,EAAavG,OA6ElC,qCACIuG,EAAatG,QACb,iEAAoCyB,KAAKC,MAA6B,IAAvB4E,EAAatG,SAAiB,IAA7E,OADuB,KAGzB,cAAC,IAAD,CACEyL,QAAS,CACPC,MAAO,CACL7B,GAAI,qBAEN8B,MAAO,CACLC,WAAYlN,IAAQ,EAAGZ,EAAe,KAG1C+N,OAAQ,CACN,CACEpM,KAAM,SACNqM,KAAMlD,IAER,CACEnJ,KAAM,QACNqM,KAAMxF,EAAavG,KAAKxB,IAAIkK,MAGhCsD,OAAO,QAET,sCACA,cAAC,IAAD,CACEN,QAAS,CACPC,MAAO,CACL7B,GAAI,qBAEN8B,MAAO,CACLC,WAAYlN,IAAQ,EAAGZ,EAAe,KAG1C+N,OAAQ,CACN,CACEpM,KAAM,MACNqM,KAAMxF,EAAavG,KAAKxB,IAAIG,IAAO,gBAGvCqN,OAAO,oBAOnB,cAAC,KAAD,CAAc/C,KAAK,gDAAgDuB,OAAO,eE1jBjEyC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFpB,SAASC,eAAe,SAM1BQ,M,gCChBA,sGAAO,IAAMY,EAAgB,SAACC,EAAIC,GAAL,IAASC,EAAT,+DAC3BtM,KAAKuM,IAAIH,EAAGxJ,UAAYyJ,EAAGzJ,WAAa,IAAM,KAC5C0J,GAAiCF,EAAGvJ,UAAYwJ,EAAGxJ,SAAWuJ,EAAGxJ,YAAcyJ,EAAGzJ,YAEzExD,EAAqB,SAACoN,EAAStQ,GAAmD,IAA3CoQ,EAA0C,wDAC5F,OAAOpQ,EAAOmD,QAAO,SAACC,GAAD,OAAO6M,EAAcK,EAASlN,EAAGgN,OAG3CzM,EAAc,SAACyM,GAAD,OAAmC,SAACF,EAAIC,GAAL,OAC5DrM,KAAKuM,IAAIH,EAAGxJ,UAAYyJ,EAAGzJ,YAAc0J,GAAiCF,EAAGvJ,UAAYwJ,EAAGxJ,QAAU,EAAI,KAE/FF,EAAe,SAACC,EAAWC,GAAZ,gBAA2BD,GAA3B,OAAuCC,EAAU,IAAM,O,gCCXnF,wIAAO,IAAM3E,EAAY,SAACuO,EAAK5I,GAAN,OAAgB7D,KAAKuM,IAAIE,EAAM5I,IAC3C6C,EAAM,SAACgG,GAAD,OAAc,SAACC,GAChC,IAAMC,EAAMD,EAAID,EAChB,OAAOE,EAAM5M,KAAK6M,MAAMD,KAEbnG,EAAa,SAACiG,EAAU5M,GAAX,OAAsB,SAAC6M,GAAD,OAAQjG,EAAIgG,EAAJhG,CAAciG,GAAMA,EAAI7M,GAAW,IAC9E6G,EAAe,SAACgG,GAAD,OAAO3M,KAAKuM,IAAIvM,KAAK8M,IAAIH,EAAI,M,gCCNzD,iFAEazP,EAAS,SAAAF,GAAM,MAAK,CAC/BM,IAAKL,IAAQ+C,KAAK1C,IAAKN,GACvBO,IAAKN,IAAQ+C,KAAKzC,IAAKP,KAGZS,EAAY,SAACsP,EAAQC,GAAT,IAAiBC,EAAjB,4DAAyB9N,EAAzB,OAAuC,SAAAnC,GAAW,IAAD,EACnCiQ,GAAS/P,EAAOF,GAAxCkQ,EAD2D,EAChE5P,IAAkB6P,EAD8C,EACnD5P,IACrB,OAAOP,EAAOF,KAAI,SAAAsQ,GAAQ,OAAOA,EAAWF,IAAWF,EAASD,IAAYI,EAASD,GAAWH,S","file":"static/js/main.55726461.chunk.js","sourcesContent":["import * as R from 'ramda'\n\nimport { limits, normalize } from './arrayHelppers'\nimport { findSuitableTracks, keyDistance } from './keys'\nimport { promiseOrTimeout } from './promiseHelpers'\nimport { penaltyFn } from './penalties'\nimport * as seedrandom from 'seedrandom'\n\nexport const graphWalk = async ({ tracks, intro, outro, targetLength, penalties, tolerance, seed, timeout = 0.5 }) => {\n  const minAndMaxValuesForPenalties = Object.fromEntries(\n    Object.keys(penalties).map((key) => {\n      const values = R.map(R.path(['properties', key]), tracks)\n      return [key, limits(values)]\n    })\n  )\n\n  const penaltyLookup = R.mapObjIndexed((_, key, ps) => {\n    const { min, max } = minAndMaxValuesForPenalties[key]\n\n    return {\n      weight: ps[key].weight,\n      values: normalize(min, max)(R.range(0, targetLength).map((i) => ps[key].fn(i))),\n    }\n  }, penalties)\n\n  const calculatePenalty = (level, track) => {\n    const mapped = Object.keys(penaltyLookup).map((name) => {\n      const penaltyObj = penaltyLookup[name]\n      return penaltyObj.weight * penaltyFn(penaltyObj.values[level], track.properties[name])\n    })\n    return R.sum(mapped)\n  }\n\n  let routes = []\n  let bestRoute = {\n    path: [],\n    penalty: Infinity,\n  }\n\n  const iterate = (node, outro, tracksLeft) => {\n    return new Promise((accept) =>\n      setImmediate(async () => {\n        const penalty = calculatePenalty(node.currentLength, node.track)\n        const currentPenalty = node.currentPenalty + penalty\n        const atTargetLength = node.currentLength === targetLength - 2\n        const suitableTracks = atTargetLength\n          ? undefined\n          : findSuitableTracks(node.track, tracksLeft).filter(\n              (t) => calculatePenalty(node.currentLength + 1, t) < tolerance\n            )\n\n        if (atTargetLength) {\n          if (currentPenalty < bestRoute.penalty) {\n            let path = []\n            let currentNode = node\n            while (currentNode !== null) {\n              path.push(currentNode.track)\n              currentNode = currentNode.previous\n            }\n\n            bestRoute = {\n              penalty: currentPenalty,\n              path: [...R.reverse(path), outro],\n            }\n\n            routes.splice(0, 0, bestRoute)\n\n            console.log(`Found path with penalty: ${currentPenalty}`)\n          }\n        }\n\n        const tooFarFromOutro = keyDistance(false)(node.track, outro) > targetLength - node.currentLength - 3\n\n        if (\n          tooFarFromOutro ||\n          atTargetLength ||\n          suitableTracks.length === 0 ||\n          node.currentPenalty > bestRoute.penalty\n        ) {\n          return accept()\n        }\n\n        let index = 0\n        for (const t of suitableTracks) {\n          if (node.currentLength === 0) {\n            console.log(`${Math.round(index / suitableTracks.length)}%`)\n            index++\n          }\n\n          await iterate(\n            {\n              previous: node,\n              track: t,\n              currentLength: node.currentLength + 1,\n              currentPenalty: node.currentPenalty + penalty,\n            },\n            outro,\n            R.without([t], tracksLeft)\n          )\n        }\n\n        return accept()\n      })\n    )\n  }\n\n  const graphStart = Date.now()\n\n  await promiseOrTimeout(\n    () =>\n      iterate(\n        {\n          previous: null,\n          track: intro,\n          currentLength: 0,\n          currentPenalty: 0,\n        },\n        outro,\n        R.without([intro, outro], tracks).sort(() => seedrandom(seed) - 0.5)\n      ),\n    timeout * 60 * 1000\n  )\n\n  const graphTime = Date.now() - graphStart\n\n  console.log('Graph done')\n  console.log(`Tracks: ${tracks.length}, Graph time: ${graphTime}`)\n\n  return routes\n}\n","export const promiseOrTimeout = (fn, timeout) => {\n  let timeoutId\n  return Promise.race([\n    new Promise(accept => timeoutId = setTimeout(() => {\n      console.log('Timeout!')\n      return accept()\n    }, timeout)),\n    new Promise(async accept => {\n      const result = await fn()\n      console.log('Done')\n      clearTimeout(timeoutId)\n      // TODO: this does not seem to work\n      return accept(result)\n    })]\n  )\n}\n","export default `Artist\\tTitle\\tKey\\tComment\nInspected\\tDestroy\\t11A\\t1\nSweatson Klank\\tSmile (Original Mix)\\t10B\\t2\nInspected\\tOnce\\t9A\\t3\nShield\\tSlavik\\t8A\\t6\nIvy Lab\\tHotel Motel (Original Mix)\\t7A\\t7\nCraze, Balatron\\tWord Up (feat. Balatron) (Original Mix)\\t6A\\t8\nMefjus\\tAssembler (Original Mix)\\t7A\\t10\n`\n","import Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\n\nimport { getKeyString } from './lib/keys'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Radio from '@material-ui/core/Radio'\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 400,\n  },\n})\n\nexport default function Tracklist({ tracks, editing, selectedTrackIndex, onTrackSelected }) {\n  const classes = useStyles()\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              {editing ? <TableCell>Select</TableCell> : null}\n              <TableCell>Artist</TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell>Key</TableCell>\n              {tracks[0]\n                ? Object.keys(tracks[0].properties).map((propertyName, i) => (\n                    <TableCell key={i}>{propertyName.replace(/^./, propertyName[0].toUpperCase())}</TableCell>\n                  ))\n                : null}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tracks.map((track, i) => (\n              <TableRow key={i}>\n                {editing ? (\n                  <TableCell key=\"select\">\n                    <Radio checked={selectedTrackIndex === i} onChange={() => onTrackSelected(i)} />\n                  </TableCell>\n                ) : null}\n                <TableCell>{track.artist}</TableCell>\n                <TableCell>{track.title}</TableCell>\n                <TableCell>{getKeyString(track.keyNumber, track.isMinor)}</TableCell>\n                {Object.values(track.properties).map((property) => (\n                  <TableCell key=\"property\">{property}</TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  )\n}\n","import assert from 'assert'\n\nexport default (list) => {\n  const rows = list\n    .trim()\n    .split('\\n')\n    .map((l) => l.trim().split('\\t'))\n\n  if (rows.length === 0) return []\n  const headers = rows[0]\n  const validRows = rows.filter((r) => r.length === headers.length)\n  assert(headers[0].toLowerCase() === 'artist')\n  assert(headers[1].toLowerCase() === 'title')\n  assert(headers[2].toLowerCase() === 'key' || headers[2] === 'key text')\n\n  const propertyNames = headers.slice(3)\n\n  return validRows.slice(1).map(([artist, title, key, ...propertyValues]) => {\n    try {\n      return {\n        title,\n        artist,\n        keyNumber: parseInt(key.slice(0, -1)),\n        isMinor: key[key.length - 1] === 'B' || key[key.length - 1] === 'd',\n        properties: Object.fromEntries(propertyValues.map((value, i) => [propertyNames[i], value.match(/(\\d+)$/)[1]])),\n      }\n    } catch (e) {\n      console.error(`Error processing row: ${title} ${artist} ${key} ${propertyValues}`)\n    }\n  })\n}\n","import { getKeyString } from './keys'\n\nconst pathToTSV = (path) => {\n  const header = `Artist\\tTitle\\tKey\\t${Object.keys(path[0].properties).join('\\t')}`\n  const tracks = path\n    .map(\n      ({ title, artist, keyNumber, isMinor, properties }) =>\n        `${artist}\\t${title}\\t${getKeyString(keyNumber, isMinor)}\\t${Object.values(properties).join('\\t')}`\n    )\n    .join('\\n')\n\n  return `${header}\\n${tracks}`\n}\n\nexport default pathToTSV\n","import './App.css'\nimport React, { useState } from 'react'\nimport Chart from 'react-apexcharts'\nimport * as R from 'ramda'\nimport { Button, ButtonGroup } from '@material-ui/core'\n\nimport defaultPlaylist from './test/playlist.js'\nimport defaultTracklist from './test/tracklist.js'\nimport Tracklist from './Tracklist'\nimport parsePlaylist from './lib/parseTracklist.js'\nimport { graphWalk } from './lib/graphWalk.js'\nimport { absoluteSine, saw } from './lib/penalties.js'\nimport { limits, normalize } from './lib/arrayHelppers'\nimport pathToTSV from './lib/pathToTSV'\n\nimport Accordion from '@material-ui/core/Accordion'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container'\nimport InfoIcon from '@material-ui/icons/Info'\nimport Slider from '@material-ui/core/Slider'\nimport Select from '@material-ui/core/Select'\nimport Typography from '@material-ui/core/Typography'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Input from '@material-ui/core/Input'\nimport GithubCorner from 'react-github-corner'\n\nimport { raisingSaw } from './lib/penalties'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\n\nfunction App() {\n  const [tracklist, setTracklist] = useState(defaultPlaylist)\n  const [tracks, setTracks] = useState(parsePlaylist(tracklist))\n  const [paths, setPaths] = useState([])\n  const [selectedPath, setSelectedPath] = useState({ penalty: undefined, path: parsePlaylist(defaultTracklist) })\n  const [targetLength, setTargetLength] = useState(7)\n  const [timeout, setTimeout] = useState(2)\n  const [tolerance, setTolerance] = useState(1.5)\n  const [processing, setProcessing] = useState(false)\n  const [editingPlaylist, setEditingPlaylist] = useState(true)\n  const [editingIntro, setEditingIntro] = useState(false)\n  const [editingOutro, setEditingOutro] = useState(false)\n  const [intro, setIntro] = useState(tracks[0])\n  const [outro, setOutro] = useState(R.last(tracks))\n  const [parametersChanged, setParametersChanged] = useState(true)\n  const [seed, setSeed] = useState(0)\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false)\n  const [targetValues, setTargetValues] = useState(\n    [8, 8, 9, 9, 2, 3, 6, 9, 10, 5, 6, 7, 10, 10, 6, 7, 8, 9, 10, 10].map((value) => ({ value }))\n  )\n  const [processingMessage, setProcessingMessage] = useState('')\n  const [editingSelectedTracklistResult, setEditingSelectedTracklistResult] = useState(true)\n  const [selectedTracklist, setSelectedTracklist] = useState(defaultTracklist)\n\n  const targetFunctions = [\n    {\n      name: 'Raising Saw',\n      fn: raisingSaw(7, targetLength),\n    },\n    {\n      name: 'Saw',\n      fn: saw(7),\n    },\n    {\n      name: 'Absolute sine',\n      fn: absoluteSine,\n    },\n    {\n      name: 'Manual',\n      fn: (i) => targetValues[i].value,\n    },\n  ]\n  const [targetFn, setTargetFunction] = useState(targetFunctions[0])\n\n  const firstProperty = (track) => R.path([0], Object.entries(track.properties))\n  const firstPropertyName = (track) => R.path([0], firstProperty(track))\n  const firstPropertyValue = (track) => R.path([1], firstProperty(track))\n  const parameterRange = limits(R.map(firstPropertyValue, tracks))\n  const getTargetValues = ({ min, max }, targetLength, fn) => {\n    return normalize(min, max)(R.range(0, targetLength).map((i) => fn(i)))\n  }\n  const [cachedTargetValues, setCachedTargetValues] = useState(\n    getTargetValues(parameterRange, targetLength, targetFn.fn)\n  )\n\n  return (\n    <>\n      <Container maxWidth=\"md\">\n        <h1>Mixtape Planner</h1>\n        <p>\n          There are a huge number of ways to arrange tracks and finding just the right one that matches the mood you are\n          after can be a burden. Want to go from one track to another, but just cannot seem to find the right tracks to\n          put in between them? This is just the right tool for the job!\n        </p>\n        <p>\n          Start by dropping a list of tracks below, selecing the track to start from, the track to end up at and the\n          mood you are after. Let the planner work its magic and prepare to be amazed by the combinations it spits out!\n        </p>\n        <p>\n          If giving the task of generating tracklists to a computer feels uncanny, you can use the tool for only\n          visualising your plans by heading over to the <a href=\"#result\">Result section</a> and dropping your tracks\n          there instead!\n        </p>\n        <h2>Parameters</h2>\n        <h3>\n          Playlist{' '}\n          <Button\n            size=\"small\"\n            disabled={processing}\n            onClick={() => {\n              if (editingPlaylist) {\n                setEditingPlaylist(false)\n                const parsedPlaylist = parsePlaylist(tracklist)\n                setTracks(parsedPlaylist)\n                setParametersChanged(true)\n                setIntro(parsedPlaylist.find(R.equals(intro)))\n                setOutro(parsedPlaylist.find(R.equals(outro)))\n              } else {\n                setEditingPlaylist(true)\n              }\n            }}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            {editingPlaylist ? 'Parse' : 'Import / Edit'}\n          </Button>\n        </h3>\n        {editingPlaylist ? (\n          <>\n            <Accordion>\n              <AccordionSummary\n                expandIcon={<InfoIcon color={'primary'} />}\n                aria-label=\"Expand\"\n                aria-controls=\"additional-actions1-content\"\n                id=\"additional-actions1-header\"\n              >\n                Instructions\n              </AccordionSummary>\n              <AccordionDetails>\n                <Typography>\n                  The planner is rather picky about the input it gets currently (a TSV formatted text with Artist,\n                  Title, Key and Comment columns). In order to produce such a file do the following:\n                  <br />\n                  <br />\n                  Export a playlist from Traktor as a web page. Include the Artist, Title, Key (or Key Text) and Comment\n                  columns. The planner uses the Comment column as input for the mood (target curve). The column can\n                  contain other data as well, but it needs to end with a number. If you are using{' '}\n                  <a href=\"https://mixedinkey.com\">Mixed in Key</a>, you can configure it to write the energy level to\n                  the comment tag (Settings > Update Tags > Where to write it > Overwrite comments). If you do not have\n                  Mixed in Key, you can use a service like <a href=\"https://tunebat.com\">Tunebat</a> to get the key and\n                  mood info.\n                  <br />\n                  <br />\n                  After exporting the playlist, open the web page and copy and paste the contents (including the\n                  headers) into the field below. Then click the Parse button above and if everything goes well, you are\n                  ready to start generating interesting track combinations!\n                </Typography>\n              </AccordionDetails>\n            </Accordion>\n            <br />\n          </>\n        ) : (\n          <>\n            <h4>\n              First track{' '}\n              <Button\n                disabled={processing}\n                size=\"small\"\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => setEditingIntro(!editingIntro)}\n              >\n                {editingIntro ? 'Done' : 'Edit'}\n              </Button>\n            </h4>\n            <Tracklist\n              tracks={editingIntro ? tracks : [intro].filter(R.identity)}\n              key=\"intro\"\n              editing={editingIntro}\n              disabled={processing}\n              onTrackSelected={(i) => {\n                setIntro(tracks[i])\n                setParametersChanged(true)\n              }}\n              selectedTrackIndex={tracks.findIndex(R.equals(intro))}\n            />\n            <h4>\n              Last track{' '}\n              <Button\n                disabled={processing}\n                size=\"small\"\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => setEditingOutro(!editingOutro)}\n              >\n                {editingOutro ? 'Done' : 'Edit'}\n              </Button>\n            </h4>\n            <Tracklist\n              tracks={editingOutro ? tracks : [outro].filter(R.identity)}\n              key=\"outro\"\n              editing={editingOutro}\n              disabled={processing}\n              onTrackSelected={(i) => {\n                setOutro(tracks[i])\n                setParametersChanged(true)\n              }}\n              selectedTrackIndex={tracks.findIndex(R.equals(outro))}\n            />\n            <h4>Rest</h4>\n            <Tracklist tracks={R.without([intro, outro], tracks)} key=\"middle\" />\n          </>\n        )}\n        <div style={{ display: editingPlaylist ? 'block' : 'none' }}>\n          <TextField\n            fullWidth={true}\n            rowsMax={20}\n            multiline\n            variant=\"outlined\"\n            onChange={(e) => {\n              setTracklist(e.target.value)\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Tab') {\n                e.preventDefault()\n                const textArea = e.target\n                const start = textArea.selectionStart\n                const end = textArea.selectionEnd\n\n                textArea.value = textArea.value.substring(0, start) + '\\t' + textArea.value.substring(end)\n\n                // put caret at right position again\n                textArea.selectionStart = textArea.selectionEnd = start + 1\n\n                setTracklist(textArea.value)\n              }\n            }}\n            value={tracklist}\n          />\n        </div>\n        <h3>Number of tracks between first and last</h3>\n        <Slider\n          min={3}\n          max={30}\n          valueLabelDisplay=\"on\"\n          value={targetLength - 2}\n          disabled={processing}\n          style={{ marginTop: 20 }}\n          onChange={(_, value) => {\n            setTargetLength(value + 2)\n            setParametersChanged(true)\n            setCachedTargetValues(getTargetValues(parameterRange, targetLength, targetFn.fn))\n          }}\n        />\n        <h3>Target curve</h3>\n        <Select\n          value={targetFn.name}\n          disabled={processing}\n          onChange={(e) => {\n            const tf = targetFunctions.find(R.propEq('name', e.target.value))\n            setTargetFunction(tf)\n            setParametersChanged(true)\n            setCachedTargetValues(getTargetValues(parameterRange, targetLength, tf.fn))\n          }}\n        >\n          {targetFunctions.map(({ name }) => (\n            <MenuItem value={name} key={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n        {targetFn.name === 'Manual' ? (\n          <>\n            <h4>Values</h4>\n            {R.range(0, targetLength).map((i) => (\n              <>\n                {i !== 0 && i % 10 === 0 ? <br /> : null}\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  style={{ width: 60, marginBottom: 10 }}\n                  label={(i + 1).toString()}\n                  key={i}\n                  value={targetValues[i].value}\n                  onChange={(e) => {\n                    targetValues[i].value = R.clamp(0, 10, parseInt(e.target.value) || 0)\n                    setTargetValues([...targetValues])\n                    setParametersChanged(true)\n                  }}\n                />\n              </>\n            ))}\n          </>\n        ) : null}\n        <Chart\n          options={{\n            chart: {\n              id: 'apexchart-example',\n            },\n            xaxis: {\n              categories: R.range(1, targetLength + 1),\n            },\n          }}\n          series={[\n            {\n              name: 'energy target',\n              data: getTargetValues(parameterRange, targetLength, targetFn.fn),\n            },\n          ]}\n          height=\"200\"\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={showAdvancedOptions}\n              onChange={() => {\n                setShowAdvancedOptions(!showAdvancedOptions)\n              }}\n            />\n          }\n          label=\"Show advanced options\"\n        />\n        {showAdvancedOptions ? (\n          <>\n            <h3>Processing timeout (minutes)</h3>\n            <Slider\n              min={0.5}\n              max={5}\n              step={0.1}\n              valueLabelDisplay=\"on\"\n              value={timeout}\n              disabled={processing}\n              onChange={(_, value) => {\n                setTimeout(value)\n                setParametersChanged(true)\n              }}\n            />\n            <h4>Tolerance</h4>\n            <Slider\n              min={0.0}\n              max={3.0}\n              step={0.1}\n              valueLabelDisplay=\"on\"\n              value={tolerance}\n              disabled={processing}\n              onChange={(_, value) => {\n                setTolerance(Number(value))\n                setParametersChanged(true)\n              }}\n            />\n            <h4>Seed</h4>\n            <Input\n              size=\"small\"\n              value={seed}\n              disabled={processing}\n              onChange={(e) => setSeed(parseInt(e.target.value) || 0)}\n            />\n            <Button\n              size=\"small\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={processing}\n              onClick={() => {\n                setSeed(Math.round(Math.random() * 1000000))\n                setParametersChanged(true)\n              }}\n            >\n              Generate seed\n            </Button>\n          </>\n        ) : null}\n        <p>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={!intro || !outro || (!parametersChanged && paths.length !== 0) || processing || editingPlaylist}\n            onClick={async () => {\n              setProcessing(true)\n              setPaths([])\n              setProcessingMessage('')\n\n              document.getElementById('result').scrollIntoView({ behavior: 'smooth', block: 'end' })\n\n              const paths = await graphWalk({\n                tracks,\n                intro,\n                outro,\n                targetLength,\n                tolerance,\n                timeout,\n                seed,\n                penalties: { [firstPropertyName(tracks[0])]: { weight: 1, fn: targetFn.fn } },\n              })\n\n              setCachedTargetValues(getTargetValues(parameterRange, targetLength, targetFn.fn))\n              setParametersChanged(false)\n              setPaths(paths)\n              setSelectedPath(paths[0])\n              setProcessing(false)\n              setEditingSelectedTracklistResult(false)\n\n              setProcessingMessage(\n                paths.length === 0 ? 'No suitable orders found. Try increasing processing timeout or tolerance' : ''\n              )\n            }}\n          >\n            Generate order\n          </Button>\n        </p>\n        {processingMessage ? <p>{processingMessage}</p> : null}\n        {processing ? (\n          <>\n            <p>Calculating...</p>\n            <CircularProgress />\n          </>\n        ) : null}\n        <div style={{ minHeight: 100 }}>\n          <h2 id=\"result\">Result</h2>\n          {!processing ? (\n            <>\n              <ButtonGroup color=\"primary\" variant=\"contained\">\n                {paths.map((path, i) => (\n                  <Button\n                    key={i}\n                    color={path === selectedPath ? 'secondary' : 'primary'}\n                    onClick={() => {\n                      setSelectedPath(path)\n                      setSelectedTracklist(pathToTSV(path.path))\n                    }}\n                  >\n                    {i + 1}\n                  </Button>\n                ))}\n              </ButtonGroup>\n              <h3>\n                Tracklist{' '}\n                <Button\n                  disabled={processing}\n                  size=\"small\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    if (!editingSelectedTracklistResult) {\n                      if (selectedPath.path.length !== 0) {\n                        setSelectedTracklist(pathToTSV(selectedPath.path))\n                      }\n                    }\n                    setEditingSelectedTracklistResult(!editingSelectedTracklistResult)\n                  }}\n                >\n                  {editingSelectedTracklistResult ? 'Done' : 'Edit'}\n                </Button>\n              </h3>\n              {!editingSelectedTracklistResult ? (\n                <Tracklist tracks={selectedPath.path} />\n              ) : (\n                <>\n                  <Accordion>\n                    <AccordionSummary\n                      expandIcon={<InfoIcon color={'primary'} />}\n                      aria-label=\"Expand\"\n                      aria-controls=\"additional-actions1-content\"\n                      id=\"additional-actions1-header\"\n                    >\n                      Instructions\n                    </AccordionSummary>\n                    <AccordionDetails>\n                      <Typography>\n                        The planner is rather picky about the input it gets currently (a TSV formatted text with Artist,\n                        Title, Key and Comment columns). In order to produce such a file do the following:\n                        <br />\n                        <br />\n                        Export a playlist from Traktor as a web page. Include the Artist, Title, Key (or Key Text) and\n                        Comment columns. The planner uses the Comment column as input for the mood (target curve). The\n                        column can contain other data as well, but it needs to end with a number. If you are using{' '}\n                        <a href=\"https://mixedinkey.com\">Mixed in Key</a>, you can configure it to write the energy\n                        level to the comment tag (Settings > Update Tags > Where to write it > Overwrite comments). If\n                        you do not have Mixed in Key, you can use a service like{' '}\n                        <a href=\"https://tunebat.com\">Tunebat</a> to get the key and mood info.\n                        <br />\n                        <br />\n                        After exporting the playlist, open the web page and copy and paste the contents (including the\n                        headers) into the field below. Then click the Done button above and if everything goes well, the\n                        graphs should update!\n                      </Typography>\n                    </AccordionDetails>\n                  </Accordion>\n                  <br />\n                  <TextField\n                    fullWidth={true}\n                    rowsMax={20}\n                    multiline\n                    display={editingSelectedTracklistResult ? 'block' : 'none'}\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      const textArea = e.target\n                      setSelectedTracklist(textArea.value)\n                      selectedPath.path = parsePlaylist(textArea.value)\n                      selectedPath.penalty = undefined\n                      setSelectedPath(selectedPath)\n                      const newLength = selectedPath.path.length\n                      if (newLength > targetLength) {\n                        setTargetLength(newLength)\n                        setCachedTargetValues(getTargetValues(parameterRange, newLength, targetFn.fn))\n                      }\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Tab') {\n                        e.preventDefault()\n                        const textArea = e.target\n                        const start = textArea.selectionStart\n                        const end = textArea.selectionEnd\n\n                        textArea.value = textArea.value.substring(0, start) + '\\t' + textArea.value.substring(end)\n                        textArea.selectionStart = textArea.selectionEnd = start + 1\n                        setSelectedTracklist(textArea.value)\n\n                        selectedPath.path = parsePlaylist(textArea.value)\n                        selectedPath.penalty = undefined\n                        setSelectedPath(selectedPath)\n                        const newLength = selectedPath.path.length\n                        if (newLength > targetLength) {\n                          setTargetLength(newLength)\n                          setCachedTargetValues(getTargetValues(parameterRange, newLength, targetFn.fn))\n                        }\n                      }\n                    }}\n                    value={selectedTracklist}\n                  />\n                </>\n              )}\n              <>\n                {!selectedPath.penalty ? null : (\n                  <h3>Correlation with target curve ({Math.round(selectedPath.penalty * 100) / 100})</h3>\n                )}\n                <Chart\n                  options={{\n                    chart: {\n                      id: 'apexchart-example',\n                    },\n                    xaxis: {\n                      categories: R.range(1, targetLength + 1),\n                    },\n                  }}\n                  series={[\n                    {\n                      name: 'Target',\n                      data: cachedTargetValues,\n                    },\n                    {\n                      name: 'Value',\n                      data: selectedPath.path.map(firstPropertyValue),\n                    },\n                  ]}\n                  height=\"200\"\n                />\n                <h3>Keys</h3>\n                <Chart\n                  options={{\n                    chart: {\n                      id: 'apexchart-example',\n                    },\n                    xaxis: {\n                      categories: R.range(1, targetLength + 1),\n                    },\n                  }}\n                  series={[\n                    {\n                      name: 'key',\n                      data: selectedPath.path.map(R.prop('keyNumber')),\n                    },\n                  ]}\n                  height=\"200\"\n                />\n              </>\n            </>\n          ) : null}\n        </div>\n      </Container>\n      <GithubCorner href=\"https://github.com/gadgetmies/mixtape_planner\" target=\"_blank\" />\n    </>\n  )\n}\n\nexport default App\n","export default `Artist\\tTitle\\tKey\\tComment\nInspected\\tDestroy\\t11A\\t1\nEPROM\\t9 To Ya Dome\\t12A\\t6\ndope\\tIt Ain't Bangin'\\t4A\\t6\nEPROM & G Jones\\tWarrior\\t4A\\t2\nEPROM\\tSamurai\\t4A\\t9\nEPROM\\tBrixton\\t4A\\t4\nHolly\\tHolly & Mr. Bill - Geen Idee\\t9A\\t5\nInspected\\tRead\\t9A\\t2\nInspected\\tOnce\\t9A\\t3\nInspected\\tThen\\t9A\\t9\nKursa\\tTōsuto\\t4A\\t6\nKursa\\tDat Style\\t4A\\t6\nKursa\\tHip-Hopeless\\t4A\\t6\nKursa X Lone Drum\\tUnarmoured Sulk\\t4A\\t7\nKursa\\tYea, OK\\t12A\\t6\nMark Instinct\\tMark Instinct - Singularity\\t9A\\t8\nSKEW & occupé\\tBad Replica\\t5A\\t10\nSkew & ReDraft\\tNo Hype\\t4A\\t4\nSKEW\\tCharged Up\\t9A\\t7\nSKEW\\tDon Robot\\t5A\\t7\nSKEW\\tCyborg Rising\\t1A\\t4\nSKEW\\tAcid Meltdown\\t2A\\t2\nDroeloe\\tStep By Step (Fytch Remix)\\t10A\\t6\nMo Vibez\\tLike Us (Original Mix)\\t10A\\t8\nEkcle\\tCrafted In Ice\\t10A\\t7\nFytch, Graves\\tExhale feat. Fytch (Original Mix)\\t11A\\t6\nShades\\tGravediggin' feat. Alix Perez and Eprom (Original Mix)\\t11A\\t3\nAleph\\tGoliath (Original Mix)\\t11A\\t2\nSofie Letitre\\tI'll Be Fine (Zes Remix)\\t11A\\t8\nShades\\tCreepin' (Original Mix)\\t11A\\t7\nMonty\\tSharp Teeth (Original Mix)\\t11A\\t8\nyunis\\tIllusions\\t11A\\t6\nSignal, Disprove, Ordure\\tZwendel feat. Ordure (Original Mix)\\t12A\\t7\nRun Dmt, Vorso\\tGamma Ray (feat. Vorso) (Original Mix)\\t12A\\t5\nKije\\tMorze (Original Mix)\\t12A\\t6\nRun Dmt\\tTesseract (Vorso Remix)\\t1A\\t0\nChee\\tPedigrief (Original Mix)\\t1A\\t7\nMystic State\\tEffwatya (Ft.Third Degree)\\t2A\\t5\nG Jones\\tIn Your Head (Original Mix)\\t2A\\t8\nSigns\\tPolymorph (Original Mix)\\t2A\\t7\nMo Vibez, L.o.J, L*o*J\\tWisdom (Feat. L*o*J) feat. L*o*J (Original Mix)\\t2A\\t4\nBalatron\\tWay Back (Original Mix)\\t2B\\t9\nBalatron\\tPoseidon (Original Mix)\\t2B\\t6\nMystic State\\tWhole Half\\t2B\\t6\nBalatron\\tHUGINN (Original Mix)\\t2B\\t7\nCesco\\tDrones\\t4A\\t6\nMr.Frenkie\\tAttrakt (Original Mix)\\t4A\\t8\nSigns\\tNaegleria (Original Mix)\\t4A\\t7\nEnei\\tCrunchy (Original Mix)\\t4A\\t4\nAleph\\tSolomon (Original Mix)\\t4A\\t6\nShield\\tVatos\\t4A\\t8\nCrimes!\\tClicc (Original Mix)\\t4A\\t7\nThelem\\tThird Time Lucky\\t4A\\t8\nV. A.\\tDJ Ride - Pump My\\t4A\\t6\nBalatron\\tD.Y.E Pop (Original Mix)\\t4A\\t5\nSigns\\tSkin Out (Original Mix)\\t4A\\t4\nDJ Craze, Icicle, Teddy Killerz\\tLouder feat. DJ Craze (Original Mix)\\t4A\\t7\nEmperor\\tJounce (Ivy Lab's 20/20 Remix)\\t4A\\t6\nIvy Lab\\tMagikess (Original Mix)\\t4A\\t6\nVue\\tHologram (Original Mix)\\t4A\\t5\nChee\\tGet Hot ft. Noclu (G Jones Remix)\\t4A\\t8\nKursa\\tPrecisely\\t4A\\t7\nV. A.\\tVorso - Cephalopod\\t4A\\t8\nWoolymammoth\\tPrasak (Original Mix)\\t4A\\t4\nCrimes!\\tRealson (Original Mix)\\t4A\\t7\nTsuruda\\tKicking Wolf\\t4A\\t5\nMefjus\\tRingshifter (Culprate Remix)\\t4A\\t8\nCulprate & Skope\\tBlowfish\\t4A\\t6\nIvy Lab\\tIvy Lab - Jinxed\\t4A\\t5\nBreak, SpectraSoul\\tInside (Original Mix)\\t4A\\t3\nARKTKT\\tUminari\\t5A\\t5\nCreepa, Mo Vibez\\tDR777 (Original Mix)\\t5A\\t4\nARKTKT\\tTesseract\\t5A\\t5\nMystic State\\tZoo (Ft.Jakaboski)\\t5A\\t6\nShield\\tDank Drip\\t5A\\t5\nAk:Hash\\tShady (Original Mix)\\t6A\\t9\nBalatron\\tFlip Your Hands (Original Mix)\\t6A\\t10\nCraze, Balatron\\tWord Up (feat. Balatron) (Original Mix)\\t6A\\t8\nShield\\tViking Journey\\t6A\\t7\nBalatron\\tMUNINN (Original Mix)\\t6A\\t7\nHerzeloyde\\tSlice & Dice\\t7A\\t5\nEkcle\\tWithin The Palms Of A God\\t7A\\t6\nV. A.\\tSkew & yunis - Trippin\\t7A\\t8\nSignal, Apashe, Black Prez\\tDies Irae (Signal Remix)\\t7A\\t6\nIvy Lab\\tHotel Motel (Original Mix)\\t7A\\t7\nEwol\\tDespair (Ak:Hash Remix)\\t7A\\t6\nShield\\tSlavik\\t8A\\t6\nEkcle\\tMoonstone\\t8A\\t6\nShades\\tIron Sharpens Iron (Original Mix)\\t8A\\t6\nAk:Hash\\tStoner (Original Mix)\\t8A\\t3\nShield\\tChicago\\t8A\\t1\nShield\\tDracula\\t8A\\t6\nShield\\tHorrormovie (Shuffle Edit)\\t8A\\t6\nShield\\tBowling Frontier\\t9A\\t6\nHerzeloyde\\tInverted Bumps ft Hapa & Tsuruda\\t9A\\t6\nMo Vibez\\tModulation\\t9A\\t8\nV. A.\\t1-800-BAD-TRIP - Turtle Soup\\t9A\\t7\nShades\\tChiron (Remix)\\t9A\\t0\nPhazz\\tCaution (Original Mix)\\t9A\\t6\nShield\\tHome Alone\\t9A\\t7\nShield\\tHorrormovie (Dirty VIP)\\t9A\\t5\nKije\\tOnce Again (Original Mix)\\t9A\\t8\nShades, Ivy Lab\\tSleaze (Original Mix)\\t9A\\t5\nCrimes!\\tFXXXUp (Original Mix)\\t9A\\t9\nSabre\\tYoga (Original Mix)\\t9A\\t6\nCraze, Shield\\tHumans are Stupid (feat. Shield) (Original Mix)\\t9A\\t5\nJon Casey\\tDimes\\t9A\\t8\nMad Zach\\tRobovox (Original Mix)\\t2d\\t1\nJUNE MILLER/TEDDY KILLERZ\\tWildlife (CVPELLV remix)\\t9A\\t5\nMonuman\\tRise\\t2A\\t9\nNoisia/Ivy Lab\\tPossession\\t7A\\t6\nSHIELD\\tFools\\t4A\\t8\nShield & Submarine\\tMarch Of Giants\\t4A\\t2\nSigns\\tClap Yah\\t4A\\t6\nNoisia, Mono & Poly\\tThe Nomad\\t5A\\t1\nBlack Sun Empire, Noisia\\tHideous (Doctrine Remix)\\t6A\\t5\nSHIELD\\tMy Flava\\t6A\\t4\nRICHIE BRAINS\\tLikkle Som\\t8A\\t2\nIVY LAB\\tBerlusconi\\t8A\\t7\nBleep Bloop\\tRecombine\\t9A\\t2\nIvy Lab & Tim Parker\\tU Smart\\t9A\\t5\nPosij\\tGrab The Cookie\\t9A\\t5\nFlosstradamus\\tRoll Up (Baauer Remix)\\t4A\\t9\nEmperor\\tForeword (Original Mix)\\t2B\\t7\nSigns\\tUnchained\\t4A\\t0\nSigns\\tSacrilÃ¨ge (Original Mix)\\t4A\\t2\nSigns, Sotilas\\tFrench Slang (Original Mix)\\t4A\\t5\n\\t4A - 170 - Shield - Horrormovie (Full)\\t4A\\t6\nLevela\\tRiot Shield\\t4A\\t10\nShield\\tDomestic Problems\\t6A\\t2\nShield\\tHollywood Swing\\t6A\\t2\nHolly\\tHolly vs. Shield - Schizo\\t4A\\t7\nHolly\\tHolly vs. Shield - Schizo (Subp Yao Remix)\\t9A\\t6\nShield, Ordure\\tDumflad (Original Mix)\\t4A\\t6\nShield\\tBe_F\\t4A\\t1\nShield & 2Stars\\tPink Soap\\t5A\\t3\nShield\\tSkippy Vinyl (Original Mix)\\t5A\\t3\n\\tShield - Nightlife (CART FREEBIE)\\t6A\\t1\n\\tShield - I Like That (CART FREEBIE) v2\\t6A\\t10\nShield\\tGoofy (Original Mix)\\t7A\\t6\nShield\\tCopenhagen (Original Mix)\\t9A\\t2\nPEREZ, Alix/EPROM\\tChiron\\t9A\\t4\nShades\\tPowers of Two feat. Alix Perez and Eprom (Original Mix)\\t6B\\t7\nShades\\tSickle (Original Mix)\\t6A\\t6\nIvy Lab\\tCalculate (Original Mix)\\t10A\\t6\nMonuman\\tSasquatch (Original Mix)\\t4A\\t7\nEprom\\tPipe Dream (Original Mix)\\t5A\\t1\nEprom, ZEKE BEATS\\tHumanoid 2.0 (Original Mix)\\t4A\\t8\nBalatron\\tZero Caliber (Original Mix)\\t11A\\t6\nBalatron\\tPoseidon (Original Mix)\\t2B\\t7\nBalatron\\tStraight Thuggin (Original Mix)\\t4A\\t6\nBalatron\\tNeck Snapper (Original Mix)\\t4A\\t0\nIVY LAB\\tUbane\\t9A\\t8\nIVY LAB\\tPlanebeats\\t4A\\t3\nIvy Lab\\tSunday Crunk (Mefjus Remix)\\t8A\\t7\nIVY LAB\\tThird World Cop\\t2A\\t1\nEmperor, Ivy Lab\\tPepper (Deft Remix)\\t4A\\t8\nIvy Lab\\tShamrock V.I.P (Original Mix)\\t9A\\t9\nIvy Lab\\tStars (Original Mix)\\t9A\\t1\nIvy Lab\\tAll Day Swimming (Original Mix)\\t7A\\t4\nTwo Fingers, Ivy Lab\\tOrange (Original Mix)\\t6A\\t3\nTwo Fingers, Ivy Lab\\tHotline (Original Mix)\\t6A\\t7\nIvy Lab x Two Fingers\\t\"Hotline\"\\t6A\\t10\nIvy Lab\\tIvy Lab - Space War 169 (Instrumental)\\t4A\\t2\nIvy Lab\\tIvy Lab feat. Onoe Caponoe & L-Zee Roselli - Space War 169\\t4A\\t6\nIvy Lab\\tSpooky Dub (Original Mix)\\t4A\\t5\nIvy Lab\\tChic (Original Mix)\\t4A\\t4\nIvy Lab\\t650 CC (Original Mix)\\t4A\\t0\nIvy Lab\\tIvy Lab - Wideboi\\t1B\\t7\nIvy Lab\\tIvy Lab - Zip It\\t11A\\t0\nIvy Lab\\tWhen I Go (Original Mix)\\t10A\\t7\nTsuruda\\tHammer (Original Mix)\\t9A\\t5\nTsuruda\\tJokes (Original Mix)\\t9A\\t6\nTsuruda\\tOut Here (Original Mix)\\t2A\\t8\nTsuruda\\tPack Heat (Original Mix)\\t12A\\t2\nTsuruda\\tCousin Litt's Revenge (Original Mix)\\t11A\\t7\nTsuruda\\traider (Original Mix)\\t9A\\t7\nBleep Bloop, Tsuruda\\tTremors (Original Mix)\\t4A\\t9\nTim Parker\\tWarped Wing (Original Mix)\\t6A\\t6\nTim Parker\\tRules (Original Mix)\\t5A\\t10\nCruk, Shyun\\tCreatures (Original Mix)\\t4A\\t3\nMono/Poly\\tTeach You All A Lesson\\t5A\\t2\nG Jones\\tImmortal Light (Original Mix)\\t4A\\t9\nEPROM & G Jones\\tWarrior\\t4A\\t7\nG Jones\\tTime (Original Mix)\\t5A\\t4\nG Jones\\tHelix (Original Mix)\\t11A\\t1\nIMANU\\tNoir (Original Mix)\\t9A\\t7\nIMANU\\tDream Mentor (Original Mix)\\t4A\\t2\nHolly, Machinedrum\\tBerry Patch (IMANU Remix)\\t12A\\t3\nPosij\\tHella Sideways (Original Mix)\\t12B\\t2\nSweatson Klank\\tSmile (Original Mix)\\t10B\\t2\nNoer the Boy\\tNosferatu's Castle (Original Mix)\\t5A\\t9\nNoer the Boy\\tZaroff (Original Mix)\\t4A\\t5\nNoer the Boy\\tTour (Original Mix)\\t2A\\t4\nTek Genesis\\tRaid (Jon Casey Remix)\\t7A\\t9\nMark Instinct\\tMark Instinct & Holly - The Bends (CRIMES! Remix)\\t4A\\t1\nBalatron\\tDat Buddah Shii (Original Mix)\\t6A\\t0\nBalatron\\tZout (Original Mix)\\t4A\\t9\nBalatron\\tActively Faded (Original Mix)\\t9A\\t5\nTorbjÃ¸rn\\tMan's Got Game (Sigrah Remix)\\t12A\\t8\nMefjus\\tAssembler (Original Mix)\\t7A\\t10\n`\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const isSuitableKey = (t1, t2, useConservativeKeyTransitions = false) =>\n  Math.abs(t1.keyNumber - t2.keyNumber) % 11 <= 1 &&\n  (!useConservativeKeyTransitions || t1.isMinor === t2.isMinor || t1.keyNumber === t2.keyNumber)\n\nexport const findSuitableTracks = (current, tracks, useConservativeKeyTransitions = false) => {\n  return tracks.filter((t) => isSuitableKey(current, t, useConservativeKeyTransitions))\n}\n\nexport const keyDistance = (useConservativeKeyTransitions) => (t1, t2) =>\n  Math.abs(t1.keyNumber - t2.keyNumber) + (useConservativeKeyTransitions && t1.isMinor !== t2.isMinor ? 1 : 0)\n\nexport const getKeyString = (keyNumber, isMinor) => `${keyNumber}${isMinor ? 'B' : 'A'}`\n","export const penaltyFn = (ref, value) => Math.abs(ref - value)\nexport const saw = (riseTime) => (n) => {\n  const pos = n / riseTime\n  return pos - Math.floor(pos)\n}\nexport const raisingSaw = (riseTime, length) => (n) => (saw(riseTime)(n) + (n / length)) / 2\nexport const absoluteSine = (n) => Math.abs(Math.sin(n / 2))\nexport const normalizedSine = (n) => (Math.sin(n) + 1) / 2\n","import * as R from 'ramda'\n\nexport const limits = values => ({\n  min: R.apply(Math.min, values),\n  max: R.apply(Math.max, values)\n})\n\nexport const normalize = (newMin, newMax, range = undefined) => values => {\n  const { min: oldMin, max: oldMax } = range || limits(values)\n  return values.map(oldValue => (((oldValue - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin)\n}\n"],"sourceRoot":""}